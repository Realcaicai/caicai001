迪米特法则 - 如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用。
		 - 如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。

外观模式 - 为子系统的一组接口提供一个一致的界面，此模式定义了一个高级接口，使得子系统更容易使用。

观察者模式 - 又叫发布-订阅模式（publish-subscribe），定义了一种一对多的依赖关系，让多个观察者对象监听某一个对象主题。
		 - 这个主题对象在状态发生变化的时候，会通知所有观察者对象，使他们能够自动更新自己。
		 - 用来解耦，让耦合的双方都依赖于抽象，而不是依赖于具体。从而使得各自的变化都不会影响另一边的变化。
		 -->> 委托事件
		
抽象工厂模式 - 提供一个创建一系列相关或者相互依赖对象的接口，而无需指定它们具体的类。
	优点：易于交换产品系列，由于具体工厂类在一个应用中只需要在初始化的时候出现一次，这就使得改变一个应用的具体工厂变得
	非常容易，它只需要改变具体工厂即可使用不同的产品配置。
	它让具体的创建实例过程和客户端分离，客户端是通过它们的抽象接口操纵实例，产品的具体类名也是被具体工厂的实现分离，不会
	出现在客户代码中。
所有在用简单工厂的地方，都可以考虑用反射技术来去除switch或者if，解除分支判断带来的耦合。
end test